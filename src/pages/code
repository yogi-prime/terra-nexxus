// import { useState } from "react";
// import { useQuery } from "@tanstack/react-query";
// import API from "@/api/api";
// import { MarketplaceHero } from "@/components/Marketplace/MarketplaceHero";
// import { MarketplaceToolbar } from "@/components/Marketplace/MarketplaceToolbar";
// import { MarketplaceGrid } from "@/components/Marketplace/MarketplaceGrid";

// export default function Marketplace() {
//   const [viewMode, setViewMode] = useState<"grid" | "list">("grid");
//   const [sortBy, setSortBy] = useState("newest");
//   const [searchQuery, setSearchQuery] = useState("");

//   const { data: properties = [], isLoading } = useQuery({
//     queryKey: ["marketplace-properties"],
//     queryFn: async () => {
//       const res = await API.get("/properties");
//       console.log("API data:", res.data); // ðŸ‘€ check shape
//       return res.data;
//     },
//   });

//   // ðŸ”Ž Simple client-side search
//   const filtered = properties.filter((p: any) =>
//     p.property_name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
//     p.address?.toLowerCase().includes(searchQuery.toLowerCase())
//   );

//   // ðŸ”½ Robust sort logic
//   const sorted = [...filtered].sort((a: any, b: any) => {
//     const parseNum = (val: any) => {
//       const num = parseInt(val, 10);
//       return isNaN(num) ? 0 : num;
//     };

//     switch (sortBy) {
//       case "price-low":
//         return parseNum(a.price) - parseNum(b.price);

//       case "price-high":
//         return parseNum(b.price) - parseNum(a.price);

//       case "sqft-high":
//         return parseNum(b.property_sqft) - parseNum(a.property_sqft);

//       case "sqft-low":
//         return parseNum(a.property_sqft) - parseNum(b.property_sqft);

//       case "possession":
//         return String(a.possession || "").localeCompare(String(b.possession || ""));

//       case "newest":
//       default: {
//         // Prefer created_at if available
//         if (a.created_at && b.created_at) {
//           return new Date(b.created_at).getTime() - new Date(a.created_at).getTime();
//         }

//         // Fallback to numeric IDs
//         if (typeof a.id === "number" && typeof b.id === "number") {
//           return b.id - a.id;
//         }

//         // Fallback to string compare
//         return String(b.id).localeCompare(String(a.id));
//       }
//     }
//   });

//   return (
//     <div>
//       <MarketplaceHero />

//       <MarketplaceToolbar
//         sortBy={sortBy}
//         onSortChange={setSortBy}
//         searchQuery={searchQuery}
//         onSearchChange={setSearchQuery}
//         viewMode={viewMode}
//         onViewModeChange={setViewMode}
//         onFilterToggle={() => console.log("Open filters")}
//         resultsCount={sorted.length}
//       />

//       {isLoading ? (
//         <p className="text-center py-10">Loading properties...</p>
//       ) : (
//         <MarketplaceGrid properties={sorted} viewMode={viewMode} />
//       )}
//     </div>
//   );
// }
import React, { useEffect, useMemo, useState } from "react";
import {
  MapPin,
  TrendingUp,
  Building2,
  Target,
  Users,
  Search,
  Grid3X3,
  List,
  SlidersHorizontal,
  Calendar,
  Shield,
  BookmarkPlus,
  BookmarkCheck,
  X,
  ArrowRight,
} from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Slider } from "@/components/ui/slider";
import { Checkbox } from "@/components/ui/checkbox";
import { Separator } from "@/components/ui/separator";
import { Header } from "@/components/Header";
import { Footer } from "@/components/Footer";
import {
  ResponsiveContainer,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  PieChart,
  Pie,
  Cell,
} from "recharts";

/* ----------------------------- types ----------------------------- */
type Category = "Residential" | "Commercial" | "Farmhouse" | "Agri Land" | "Res Plots" | "Ind Plots";
type RiskBand = "Low" | "Medium" | "High";
type Status = "Open" | "Closing Soon" | "Fully Funded" | "Closed";

export interface MarketProperty {
  id: string | number;
  title: string;
  location: string; // "City, State"
  category: Category;
  minInvest: number;
  targetRaise: number;
  raisedAmount: number;
  projectedYield: number; // %
  tenure: number; // months
  riskBand: RiskBand;
  status: Status;
  highlights: string[];
  image: string; // URL
}

interface Filters {
  categories: Category[];
  state: string;
  city: string;
  ticketRange: [number, number];
  yieldRange: [number, number];
  risk: RiskBand[];
  status: Status[];
}

/* ----------------------------- utils ----------------------------- */
const formatCurrency = (value: number) => {
  if (value >= 10000000) return `â‚¹${(value / 10000000).toFixed(1)} Cr`;
  if (value >= 100000) return `â‚¹${(value / 100000).toFixed(1)} L`;
  if (value >= 1000) return `â‚¹${(value / 1000).toFixed(0)}K`;
  return `â‚¹${value}`;
};
const brandGradient = "linear-gradient(90deg,#22c55e 0%,#84cc16 50%,#facc15 100%)";

/* ----------------------------- page ----------------------------- */
export default function Marketplace() {
  /* ---------------- data (later: replace with API) ---------------- */
  const [loading, setLoading] = useState(true);
  const [properties, setProperties] = useState<MarketProperty[]>([]);
  const [error, setError] = useState<string>("");

  useEffect(() => {
    // MOCK: simulate API
    const timer = setTimeout(() => {
      const mock: MarketProperty[] = [
        {
          id: 1,
          title: "BRILLIA",
          location: "Ahmedabad, Gujarat",
          category: "Commercial",
          minInvest: 5000000,
          targetRaise: 120000000,
          raisedAmount: 75000000,
          projectedYield: 10.2,
          tenure: 36,
          riskBand: "Medium",
          status: "Open",
          highlights: ["Prime location", "Ample parking", "Integrated retail", "Green spaces"],
          image:
            "https://images.unsplash.com/photo-1494526585095-c41746248156?q=80&w=1600&auto=format&fit=crop",
        },
        {
          id: 2,
          title: "Skyline Vista",
          location: "Pune, Maharashtra",
          category: "Residential",
          minInvest: 2500000,
          targetRaise: 65000000,
          raisedAmount: 42000000,
          projectedYield: 11.8,
          tenure: 30,
          riskBand: "Low",
          status: "Open",
          highlights: ["Clubhouse", "Pool & Gym", "Near IT park"],
          image:
            "https://images.unsplash.com/photo-1505843513577-22bb7d21e455?q=80&w=1600&auto=format&fit=crop",
        },
        {
          id: 3,
          title: "EcoWorks Towers",
          location: "Gurugram, Haryana",
          category: "Commercial",
          minInvest: 4000000,
          targetRaise: 98000000,
          raisedAmount: 94000000,
          projectedYield: 12.5,
          tenure: 48,
          riskBand: "Medium",
          status: "Closing Soon",
          highlights: ["LEED Gold", "Grade-A offices", "Metro connected"],
          image:
            "https://images.unsplash.com/photo-1469022563428-aa04fef9f2c1?q=80&w=1600&auto=format&fit=crop",
        },
        {
          id: 4,
          title: "Palm County Farm",
          location: "Nashik, Maharashtra",
          category: "Farmhouse",
          minInvest: 1200000,
          targetRaise: 18000000,
          raisedAmount: 18000000,
          projectedYield: 9.4,
          tenure: 24,
          riskBand: "Low",
          status: "Fully Funded",
          highlights: ["Weekend stay", "Managed farmland"],
          image:
            "https://images.unsplash.com/photo-1500530855697-b586d89ba3ee?q=80&w=1600&auto=format&fit=crop",
        },
        {
          id: 5,
          title: "Indus Logistics Park",
          location: "Jaipur, Rajasthan",
          category: "Ind Plots",
          minInvest: 3000000,
          targetRaise: 54000000,
          raisedAmount: 19000000,
          projectedYield: 13.2,
          tenure: 42,
          riskBand: "High",
          status: "Open",
          highlights: ["Near NH", "Dock-ready", "Eaves 30ft"],
          image:
            "https://images.unsplash.com/photo-1552872673-9b7b99711ebb?q=80&w=1600&auto=format&fit=crop",
        },
        {
          id: 6,
          title: "Bayview Plots",
          location: "Kochi, Kerala",
          category: "Res Plots",
          minInvest: 1500000,
          targetRaise: 20000000,
          raisedAmount: 9000000,
          projectedYield: 8.8,
          tenure: 18,
          riskBand: "Medium",
          status: "Open",
          highlights: ["Seaside", "Gated layout"],
          image:
            "https://images.unsplash.com/photo-1460472178825-e5240623afd5?q=80&w=1600&auto=format&fit=crop",
        },
      ];
      setProperties(mock);
      setLoading(false);
    }, 600);
    return () => clearTimeout(timer);
  }, []);

  /* ---------------- view/filters/sort/search ---------------- */
  const [viewMode, setViewMode] = useState<"grid" | "list">("grid");
  const [sortBy, setSortBy] = useState("newest");
  const [search, setSearch] = useState("");

  const [filters, setFilters] = useState<Filters>({
    categories: [],
    state: "",
    city: "",
    ticketRange: [100000, 10000000],
    yieldRange: [5, 25],
    risk: [],
    status: [],
  });

  const states = [
    "Maharashtra",
    "Gujarat",
    "Haryana",
    "Karnataka",
    "Delhi",
    "Tamil Nadu",
    "Rajasthan",
    "Kerala",
  ];
  const citiesByState: Record<string, string[]> = {
    Maharashtra: ["Mumbai", "Pune", "Nashik", "Nagpur"],
    Gujarat: ["Ahmedabad", "Surat", "Vadodara"],
    Haryana: ["Gurugram", "Faridabad"],
    Karnataka: ["Bengaluru", "Mysuru"],
    Delhi: ["New Delhi"],
    "Tamil Nadu": ["Chennai", "Coimbatore"],
    Rajasthan: ["Jaipur", "Udaipur"],
    Kerala: ["Kochi", "Trivandrum"],
  };

  const openMobileFilter = () => setFilterOpen(true);
  const [filterOpen, setFilterOpen] = useState(false);

  /* ---------------- derived lists ---------------- */
  const filtered = useMemo(() => {
    let list = properties.slice();

    // search
    if (search.trim()) {
      const q = search.toLowerCase();
      list = list.filter(
        (p) =>
          p.title.toLowerCase().includes(q) ||
          p.location.toLowerCase().includes(q) ||
          p.category.toLowerCase().includes(q)
      );
    }

    // category
    if (filters.categories.length) {
      list = list.filter((p) => filters.categories.includes(p.category));
    }

    // state/city
    if (filters.state) {
      list = list.filter((p) => p.location.toLowerCase().includes(filters.state.toLowerCase()));
    }
    if (filters.city) {
      list = list.filter((p) => p.location.toLowerCase().includes(filters.city.toLowerCase()));
    }

    // ticket
    list = list.filter(
      (p) => p.minInvest >= filters.ticketRange[0] && p.minInvest <= filters.ticketRange[1]
    );

    // yield
    list = list.filter(
      (p) => p.projectedYield >= filters.yieldRange[0] && p.projectedYield <= filters.yieldRange[1]
    );

    // risk / status
    if (filters.risk.length) list = list.filter((p) => filters.risk.includes(p.riskBand));
    if (filters.status.length) list = list.filter((p) => filters.status.includes(p.status));

    // sort
    switch (sortBy) {
      case "yield-high":
        list.sort((a, b) => b.projectedYield - a.projectedYield);
        break;
      case "yield-low":
        list.sort((a, b) => a.projectedYield - b.projectedYield);
        break;
      case "funded-high":
        list.sort(
          (a, b) => b.raisedAmount / b.targetRaise - a.raisedAmount / a.targetRaise
        );
        break;
      case "min-invest-low":
        list.sort((a, b) => a.minInvest - b.minInvest);
        break;
      case "min-invest-high":
        list.sort((a, b) => b.minInvest - a.minInvest);
        break;
      case "closing-soon":
        list.sort((a, b) => (a.status === "Closing Soon" ? -1 : 1));
        break;
      default:
        // newest placeholder (no dates in mock)
        list.sort((a, b) => Number(b.id) - Number(a.id));
    }

    return list;
  }, [properties, search, filters, sortBy]);

  /* ---------------- analytics (recharts) ---------------- */
  const totalTarget = filtered.reduce((s, p) => s + p.targetRaise, 0);
  const totalRaised = filtered.reduce((s, p) => s + p.raisedAmount, 0);
  const avgMin = filtered.length ? filtered.reduce((s, p) => s + p.minInvest, 0) / filtered.length : 0;
  const avgYield = filtered.length ? filtered.reduce((s, p) => s + p.projectedYield, 0) / filtered.length : 0;

  const fundingData = filtered.slice(0, 6).map((p) => ({
    name: p.title.split(" ").slice(0, 2).join(" "),
    target: p.targetRaise / 10000000,
    raised: p.raisedAmount / 10000000,
  }));

  const categoriesData = Object.values(
    filtered.reduce((acc: Record<string, { name: string; value: number }>, p) => {
      acc[p.category] = acc[p.category] || { name: p.category, value: 0 };
      acc[p.category].value += 1;
      return acc;
    }, {})
  );
  const PIE_COLORS = ["#22c55e", "#84cc16", "#facc15", "#10b981", "#65a30d", "#ca8a04"];

  /* ---------------- watchlist ---------------- */
  const [watchlist, setWatchlist] = useState<MarketProperty[]>([]);
  const toggleWatch = (p: MarketProperty) => {
    setWatchlist((prev) =>
      prev.find((x) => x.id === p.id) ? prev.filter((x) => x.id !== p.id) : [...prev, p]
    );
  };

  /* ---------------- ui helpers ---------------- */
  const statusChip = (s: Status) => {
    switch (s) {
      case "Open":
        return "bg-emerald-500 text-white";
      case "Closing Soon":
        return "bg-amber-500 text-white";
      case "Fully Funded":
        return "bg-indigo-600 text-white";
      default:
        return "bg-slate-300 text-slate-800";
    }
  };
  const riskColor = (r: RiskBand) =>
    r === "Low" ? "text-emerald-600" : r === "Medium" ? "text-amber-600" : "text-rose-600";

  /* ---------------- render ---------------- */
  return (
    <div className="min-h-screen bg-background">
      <Header />

      {/* HERO */}
      <section className="relative overflow-hidden">
        <div
          className="absolute inset-0 bg-cover bg-center"
          style={{
            backgroundImage:
              "url(https://images.unsplash.com/photo-1486406146926-c627a92ad1ab?q=80&w=2000&auto=format&fit=crop)",
          }}
        />
        <div className="absolute inset-0 bg-gradient-to-r from-[#0b2019]/95 via-[#0b2019]/85 to-transparent" />
        <div className="relative z-10 container mx-auto px-4 py-14 md:py-20">
          <div className="text-center">
            <h1 className="text-4xl md:text-6xl font-bold leading-tight">
              <span className="text-white">Browse Properties.</span>{" "}
              <span
                className="bg-clip-text text-transparent"
                style={{ backgroundImage: brandGradient }}
              >
                Own Fraction by Fraction.
              </span>
            </h1>
            <p className="mt-3 text-white/80 max-w-3xl mx-auto">
              Discover Residential, Commercial, Farmhouses, Agri Land & Plots starting from
              <span className="font-semibold text-amber-300"> minimal investments</span>.
            </p>
          </div>

          <div className="mt-10 grid grid-cols-2 md:grid-cols-4 gap-4">
            {[
              { label: "Total Live", value: properties.length.toString(), icon: Building2 },
              { label: "Avg Yield", value: `${avgYield.toFixed(1)}%`, icon: TrendingUp },
              { label: "Target Raise", value: formatCurrency(totalTarget), icon: Target },
              { label: "Raised So Far", value: formatCurrency(totalRaised), icon: Users },
            ].map(({ label, value, icon: Icon }, i) => (
              <div
                key={i}
                className="rounded-xl p-5 bg-white/5 backdrop-blur border border-white/15 text-white"
              >
                <div className="flex justify-center mb-2">
                  <Icon className="h-7 w-7 text-amber-300" />
                </div>
                <div className="text-2xl font-bold text-center">{value}</div>
                <p className="text-xs text-center opacity-80 mt-1">{label}</p>
              </div>
            ))}
          </div>
        </div>
      </section>

      <main className="container mx-auto px-4">
        {/* TOOLBAR */}
        <div className="-mt-10 relative z-20 bg-card border border-emerald-900/20 rounded-xl p-4 mb-6 shadow-lg">
          <div className="flex flex-col lg:flex-row gap-4 items-start lg:items-center justify-between">
            <div className="flex-1 flex items-center gap-4 w-full lg:w-auto">
              <div className="relative flex-1 max-w-md">
                <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground h-4 w-4" />
                <Input
                  placeholder="Search by title, city, categoryâ€¦"
                  value={search}
                  onChange={(e) => setSearch(e.target.value)}
                  className="pl-10"
                />
              </div>
              <div className="text-sm text-muted-foreground whitespace-nowrap">
                {filtered.length} results
              </div>
            </div>

            <div className="flex items-center gap-3 w-full lg:w-auto justify-between lg:justify-end">
              <Button variant="outline" size="sm" onClick={openMobileFilter} className="lg:hidden">
                <SlidersHorizontal className="h-4 w-4 mr-2" />
                Filters
              </Button>

              <Select value={sortBy} onValueChange={setSortBy}>
                <SelectTrigger className="w-48">
                  <SelectValue placeholder="Sort by" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="newest">Newest First</SelectItem>
                  <SelectItem value="yield-high">Highest Yield</SelectItem>
                  <SelectItem value="yield-low">Lowest Yield</SelectItem>
                  <SelectItem value="funded-high">Most Funded</SelectItem>
                  <SelectItem value="closing-soon">Closing Soon</SelectItem>
                  <SelectItem value="min-invest-low">Min Ticket (Lowâ†’High)</SelectItem>
                  <SelectItem value="min-invest-high">Min Ticket (Highâ†’Low)</SelectItem>
                </SelectContent>
              </Select>

              <div className="flex items-center border border-emerald-900/20 rounded-lg p-1">
                <Button
                  variant={viewMode === "grid" ? "secondary" : "ghost"}
                  size="sm"
                  onClick={() => setViewMode("grid")}
                  className="h-8 w-8 p-0"
                >
                  <Grid3X3 className="h-4 w-4" />
                </Button>
                <Button
                  variant={viewMode === "list" ? "secondary" : "ghost"}
                  size="sm"
                  onClick={() => setViewMode("list")}
                  className="h-8 w-8 p-0"
                >
                  <List className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </div>
        </div>

        <div className="flex gap-8">
          {/* FILTER SIDEBAR */}
          <div className="hidden lg:block w-80 flex-shrink-0">
            <div className="bg-card border border-emerald-900/20 rounded-xl p-6 sticky top-24 max-h-[calc(100vh-120px)] overflow-y-auto">
              <FilterPanel
                filters={filters}
                setFilters={setFilters}
                states={states}
                citiesByState={citiesByState}
              />
            </div>
          </div>

          {/* MAIN CONTENT */}
          <div className="flex-1 min-w-0">
            {/* Analytics */}
            <section className="mb-8">
              <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                {[
                  { title: "Avg Min Ticket", value: formatCurrency(avgMin || 0), icon: Building2, change: "+8%" },
                  { title: "Avg Yield", value: `${avgYield.toFixed(1)}%`, icon: TrendingUp, change: "+1.6%" },
                  { title: "Total Target", value: formatCurrency(totalTarget), icon: Target, change: "+12%" },
                  { title: "Raised", value: formatCurrency(totalRaised), icon: Users, change: "+5%" },
                ].map((k, i) => (
                  <div key={i} className="rounded-2xl bg-[#0A1A16] p-[1px]">
                    <div className="relative overflow-hidden rounded-2xl p-5 bg-[linear-gradient(135deg,#0F2520_0%,#143229_55%,rgba(31,122,90,0.22)_100%)]">
                      <div className="pointer-events-none absolute -bottom-10 -right-10 w-28 h-28 rounded-full bg-[radial-gradient(closest-side,#F4C84A33,#F4C84A00)]" />
                      <div className="flex items-center justify-between mb-4">
                        <div className="p-2 rounded-lg bg-[linear-gradient(135deg,rgba(31,122,90,.18),rgba(244,200,74,.18))] text-[#F4C84A]">
                          <k.icon className="h-5 w-5" />
                        </div>
                        <span className="text-[11px] font-medium px-2 py-0.5 rounded-full bg-emerald-500/15 text-emerald-300">
                          {k.change}
                        </span>
                      </div>
                      <div
                        className="text-2xl font-semibold bg-clip-text text-transparent"
                        style={{ backgroundImage: "linear-gradient(90deg,#FFE08C,#F4C84A)" }}
                      >
                        {k.value}
                      </div>
                      <p className="text-sm text-white/70">{k.title}</p>
                    </div>
                  </div>
                ))}
              </div>

              <div className="grid lg:grid-cols-2 gap-6">
                <Card className="border-emerald-900/20">
                  <CardHeader>
                    <CardTitle>Funding Progress</CardTitle>
                  </CardHeader>
                  <CardContent className="h-[300px]">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart data={fundingData}>
                        <CartesianGrid strokeDasharray="3 3" stroke="hsl(var(--border))" />
                        <XAxis dataKey="name" tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }} />
                        <YAxis tick={{ fill: 'hsl(var(--muted-foreground))', fontSize: 12 }} />
                        <Tooltip
                          contentStyle={{
                            backgroundColor: 'hsl(var(--card))',
                            border: '1px solid hsl(var(--border))',
                            borderRadius: '8px',
                          }}
                          formatter={(v: number, n: string) => [`â‚¹${(v as number).toFixed(1)} Cr`, n === "target" ? "Target" : "Raised"]}
                        />
                        <Bar dataKey="target" name="target" fill="hsl(var(--muted))" radius={[4, 4, 0, 0]} />
                        <Bar dataKey="raised" name="raised" fill="#22c55e" radius={[4, 4, 0, 0]} />
                      </BarChart>
                    </ResponsiveContainer>
                  </CardContent>
                </Card>

                <Card className="border-emerald-900/20">
                  <CardHeader>
                    <CardTitle>Category Distribution</CardTitle>
                  </CardHeader>
                  <CardContent className="h-[300px]">
                    <ResponsiveContainer width="100%" height="100%">
                      <PieChart>
                        <Pie
                          data={categoriesData}
                          cx="50%"
                          cy="50%"
                          innerRadius={60}
                          outerRadius={100}
                          paddingAngle={4}
                          dataKey="value"
                          label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                          labelLine={false}
                        >
                          {categoriesData.map((_, i) => (
                            <Cell key={i} fill={PIE_COLORS[i % PIE_COLORS.length]} />
                          ))}
                        </Pie>
                        <Tooltip
                          contentStyle={{
                            backgroundColor: 'hsl(var(--card))',
                            border: '1px solid hsl(var(--border))',
                            borderRadius: '8px',
                          }}
                        />
                      </PieChart>
                    </ResponsiveContainer>
                  </CardContent>
                </Card>
              </div>
            </section>

            {/* GRID / LIST */}
            <section>
              <div
                className={`grid gap-6 ${
                  viewMode === "grid" ? "grid-cols-1 md:grid-cols-2 lg:grid-cols-3" : "grid-cols-1"
                }`}
              >
                {filtered.map((p) => {
                  const fundedPct = (p.raisedAmount / p.targetRaise) * 100;
                  const inWatch = !!watchlist.find((x) => x.id === p.id);
                  return (
                    <Card
                      key={p.id}
                      className="group hover:shadow-xl transition-all duration-300 border-emerald-900/20 hover:border-emerald-700/30 overflow-hidden"
                    >
                      {/* image */}
                      <div className="relative h-48 bg-muted overflow-hidden">
                        <img
                          src={p.image}
                          alt={p.title}
                          className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500"
                        />
                        <Badge className={`absolute top-3 right-3 ${statusChip(p.status)}`}>{p.status}</Badge>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => toggleWatch(p)}
                          className="absolute top-3 left-3 bg-background/80 backdrop-blur-sm"
                        >
                          {inWatch ? <BookmarkCheck className="h-4 w-4" /> : <BookmarkPlus className="h-4 w-4" />}
                        </Button>
                      </div>

                      <CardHeader className="pb-3">
                        <div className="flex items-start justify-between gap-3">
                          <div className="min-w-0">
                            <h3 className="text-lg font-semibold mb-1 truncate">{p.title}</h3>
                            <div className="flex items-center text-muted-foreground">
                              <MapPin className="h-4 w-4 mr-1" />
                              <span className="text-sm truncate">{p.location}</span>
                            </div>
                          </div>
                          <Badge variant="outline">{p.category}</Badge>
                        </div>
                      </CardHeader>

                      <CardContent className="pt-0">
                        <div className="grid grid-cols-2 gap-3 mb-4 text-sm">
                          <div>
                            <p className="text-muted-foreground">Min Invest</p>
                            <p className="font-semibold">{formatCurrency(p.minInvest)}</p>
                          </div>
                          <div>
                            <p className="text-muted-foreground">Target Raise</p>
                            <p className="font-semibold">{formatCurrency(p.targetRaise)}</p>
                          </div>
                          <div>
                            <p className="text-muted-foreground">Projected Yield</p>
                            <p className="font-semibold text-emerald-600 flex items-center">
                              <TrendingUp className="h-3 w-3 mr-1" />
                              {p.projectedYield}%
                            </p>
                          </div>
                          <div>
                            <p className="text-muted-foreground">Tenure</p>
                            <p className="font-semibold">{p.tenure} months</p>
                          </div>
                        </div>

                        {/* Funding Progress (greenâ†’yellow gradient) */}
                        <div className="mb-4">
                          <div className="flex justify-between items-center mb-2">
                            <span className="text-sm text-muted-foreground">Funding Progress</span>
                            <span className="text-sm font-medium">{fundedPct.toFixed(1)}%</span>
                          </div>
                          <div className="h-2 w-full rounded-full bg-muted overflow-hidden border border-white/50">
                            <div
                              className="h-full rounded-full"
                              style={{
                                width: `${Math.min(fundedPct, 100)}%`,
                                backgroundImage: brandGradient,
                                transition: "width .6s ease",
                              }}
                            />
                          </div>
                          <div className="flex justify-between items-center mt-1 text-xs text-muted-foreground">
                            <span>{formatCurrency(p.raisedAmount)} raised</span>
                            <span>{formatCurrency(p.targetRaise)} target</span>
                          </div>
                        </div>

                        {/* Highlights */}
                        <div className="mb-4">
                          <div className="flex flex-wrap gap-1">
                            {p.highlights.map((h, i) => (
                              <Badge key={i} variant="secondary" className="text-xs">
                                {h}
                              </Badge>
                            ))}
                          </div>
                        </div>

                        <div className="flex justify-between items-center">
                          <div className="flex items-center text-sm">
                            <Shield className={`h-4 w-4 mr-1 ${riskColor(p.riskBand)}`} />
                            <span className={riskColor(p.riskBand)}>{p.riskBand} Risk</span>
                          </div>
                          <Button
                            variant="hero"
                            size="sm"
                            onClick={() => (window.location.href = `/property-show/${p.id}`)}
                          >
                            Explore
                            <ArrowRight className="h-4 w-4 ml-2" />
                          </Button>
                        </div>
                      </CardContent>
                    </Card>
                  );
                })}
              </div>
            </section>

            {/* CTA */}
            <section className="mt-12 mb-8">
              <div className="rounded-2xl p-8 text-center relative overflow-hidden"
                   style={{ backgroundImage: brandGradient }}>
                <div className="absolute inset-0 opacity-10">
                  <div className="absolute top-6 left-6"><Building2 className="h-16 w-16"/></div>
                  <div className="absolute bottom-6 right-6"><Building2 className="h-20 w-20"/></div>
                </div>
                <div className="relative z-10">
                  <h2 className="text-3xl md:text-4xl font-bold text-white mb-3">
                    Start Investing in Properties Today
                  </h2>
                  <p className="text-white/90 mb-6 max-w-2xl mx-auto">
                    Join thousands of investors building wealth through fractional real estate.
                  </p>
                  <div className="flex gap-3 justify-center">
                    <Button variant="secondary" size="lg" className="bg-white text-emerald-700 hover:bg-white/90">
                      Begin KYC
                    </Button>
                    <Button variant="outline" size="lg" className="border-white/40 text-white hover:bg-white/10">
                      Browse All Categories
                    </Button>
                  </div>
                </div>
              </div>
            </section>
          </div>
        </div>

        {/* MOBILE FILTER SHEET */}
        {filterOpen && (
          <div className="lg:hidden fixed inset-0 z-50 bg-black/50" onClick={() => setFilterOpen(false)}>
            <div className="absolute right-0 top-0 h-full w-80 bg-background" onClick={(e) => e.stopPropagation()}>
              <div className="h-full overflow-y-auto p-6">
                <FilterPanel
                  filters={filters}
                  setFilters={setFilters}
                  states={states}
                  citiesByState={citiesByState}
                  onClose={() => setFilterOpen(false)}
                />
              </div>
            </div>
          </div>
        )}

        {/* WATCHLIST DOCK */}
        {watchlist.length > 0 && (
          <div className="fixed bottom-0 left-0 right-0 z-50 bg-card border-t border-emerald-900/20 shadow-xl">
            <div className="container mx-auto px-4 py-3">
              <div className="flex items-center justify-between mb-2">
                <div className="font-semibold">Watchlist ({watchlist.length})</div>
                <Button variant="ghost" size="sm" onClick={() => setWatchlist([])}>
                  Clear
                </Button>
              </div>
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 max-h-56 overflow-y-auto">
                {watchlist.map((p) => (
                  <Card key={p.id} className="relative border-emerald-900/20">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => setWatchlist((prev) => prev.filter((x) => x.id !== p.id))}
                      className="absolute top-1 right-1 h-6 w-6 p-0 hover:bg-rose-600 hover:text-white"
                    >
                      <X className="h-3 w-3" />
                    </Button>
                    <CardContent className="p-3">
                      <div className="flex gap-3">
                        <img src={p.image} className="w-16 h-16 rounded object-cover" />
                        <div className="min-w-0">
                          <div className="font-medium text-sm truncate">{p.title}</div>
                          <div className="text-xs text-muted-foreground truncate">{p.location}</div>
                          <div className="text-xs mt-1">
                            <span className="font-semibold">{p.projectedYield}%</span> â€¢ {formatCurrency(p.minInvest)}
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          </div>
        )}
      </main>

      <Footer />
    </div>
  );
}

/* ----------------------------- Filter Panel (inline) ----------------------------- */
function FilterPanel({
  filters,
  setFilters,
  states,
  citiesByState,
  onClose,
}: {
  filters: Filters;
  setFilters: React.Dispatch<React.SetStateAction<Filters>>;
  states: string[];
  citiesByState: Record<string, string[]>;
  onClose?: () => void;
}) {
  const categories: Category[] = ["Residential", "Commercial", "Farmhouse", "Agri Land", "Res PLOTS" as any, "Ind Plots"].map((c: any) =>
    c === "Res PLOTS" ? "Res Plots" : c
  ) as Category[];
  const statusOptions: Status[] = ["Open", "Closing Soon", "Fully Funded", "Closed"];
  const riskOptions: RiskBand[] = ["Low", "Medium", "High"];

  const toggleArr = <T extends string>(arr: T[], value: T, checked: boolean) =>
    checked ? [...arr, value] : arr.filter((v) => v !== value);

  return (
    <div>
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-2">
          <SlidersHorizontal className="h-5 w-5 text-emerald-500" />
          <h3 className="text-lg font-semibold">Filters</h3>
        </div>
        {onClose && (
          <Button variant="ghost" size="sm" onClick={onClose}>
            <X className="h-4 w-4" />
          </Button>
        )}
      </div>

      {/* Category */}
      <div className="mb-6">
        <h4 className="font-medium mb-3">Category</h4>
        <div className="space-y-3">
          {categories.map((c) => (
            <div key={c} className="flex items-center space-x-2">
              <Checkbox
                id={`cat-${c}`}
                checked={filters.categories.includes(c)}
                onCheckedChange={(chk) =>
                  setFilters((f) => ({ ...f, categories: toggleArr(f.categories, c, !!chk) }))
                }
              />
              <label htmlFor={`cat-${c}`} className="text-sm font-medium">
                {c}
              </label>
            </div>
          ))}
        </div>
      </div>

      <Separator className="my-6" />

      {/* Location */}
      <div className="mb-6">
        <h4 className="font-medium mb-3">Location</h4>
        <div className="space-y-3">
          <Select
            value={filters.state}
            onValueChange={(v) => setFilters((f) => ({ ...f, state: v, city: "" }))}
          >
            <SelectTrigger><SelectValue placeholder="Select State" /></SelectTrigger>
            <SelectContent>
              {states.map((s) => (
                <SelectItem key={s} value={s}>
                  {s}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>

          {filters.state && (
            <Select
              value={filters.city}
              onValueChange={(v) => setFilters((f) => ({ ...f, city: v }))}
            >
              <SelectTrigger><SelectValue placeholder="Select City" /></SelectTrigger>
              <SelectContent>
                {citiesByState[filters.state]?.map((c) => (
                  <SelectItem key={c} value={c}>
                    {c}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          )}
        </div>
      </div>

      <Separator className="my-6" />

      {/* Ticket size */}
      <div className="mb-6">
        <h4 className="font-medium mb-3">Min Investment Range</h4>
        <div className="px-2">
          <Slider
            value={filters.ticketRange}
            onValueChange={(v) => setFilters((f) => ({ ...f, ticketRange: v as [number, number] }))}
            max={10000000}
            min={100000}
            step={50000}
            className="mb-3"
          />
          <div className="flex justify-between text-sm text-muted-foreground">
            <span>{formatCurrency(filters.ticketRange[0])}</span>
            <span>{formatCurrency(filters.ticketRange[1])}</span>
          </div>
        </div>
      </div>

      <Separator className="my-6" />

      {/* Yield */}
      <div className="mb-6">
        <h4 className="font-medium mb-3">Expected Yield Range</h4>
        <div className="px-2">
          <Slider
            value={filters.yieldRange}
            onValueChange={(v) => setFilters((f) => ({ ...f, yieldRange: v as [number, number] }))}
            max={25}
            min={5}
            step={0.5}
            className="mb-3"
          />
          <div className="flex justify-between text-sm text-muted-foreground">
            <span>{filters.yieldRange[0]}%</span>
            <span>{filters.yieldRange[1]}%</span>
          </div>
        </div>
      </div>

      <Separator className="my-6" />

      {/* Risk */}
      <div className="mb-6">
        <h4 className="font-medium mb-3">Risk Band</h4>
        <div className="space-y-3">
          {(["Low", "Medium", "High"] as RiskBand[]).map((r) => (
            <div key={r} className="flex items-center space-x-2">
              <Checkbox
                id={`risk-${r}`}
                checked={filters.risk.includes(r)}
                onCheckedChange={(chk) =>
                  setFilters((f) => ({ ...f, risk: toggleArr(f.risk, r, !!chk) }))
                }
              />
              <label htmlFor={`risk-${r}`} className="text-sm font-medium">
                {r}
              </label>
            </div>
          ))}
        </div>
      </div>

      <Separator className="my-6" />

      {/* Status */}
      <div className="mb-6">
        <h4 className="font-medium mb-3">Funding Status</h4>
        <div className="space-y-3">
          {(["Open", "Closing Soon", "Fully Funded", "Closed"] as Status[]).map((s) => (
            <div key={s} className="flex items-center space-x-2">
              <Checkbox
                id={`status-${s}`}
                checked={filters.status.includes(s)}
                onCheckedChange={(chk) =>
                  setFilters((f) => ({ ...f, status: toggleArr(f.status, s, !!chk) }))
                }
              />
              <label htmlFor={`status-${s}`} className="text-sm font-medium">
                {s}
              </label>
            </div>
          ))}
        </div>
      </div>

      <Button className="w-full" variant="hero" onClick={onClose}>
        Apply Filters
      </Button>
    </div>
  );
}
